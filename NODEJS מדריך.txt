CLI - commend line interface
כלי(תוכנה) המשמש לכתיבת פקודות למחשב במקום להקליק.
bash - בלינוקס
terminal - במק
cmd- בווינדוס
ואחרים...


V8- The javascript engine 
מאחוריו עומדים מספר חלקים:
Processors - מכונה קטנה במחשב, שעובדת ביחד עם קלט חשמלי ובסופו של דבר מבצעת עבודה.
לא כל המעבדים מדברים את אותה השפה.
שפות המעבדים:
AI-32
x86-64
ARM
MIPS 

קומפילציה - התהליך שמתרגם את שפת התכנות לשפה שהמעבד מבין בכדי שיוכל לבצע את העבודה שהוטלה עליו.

ECMASCRIPT - הסטנדרט שג'אווה-סקריפט מבוססת עליו.

Javascript engine - תוכנה שממירה לשפה שהמעבד יכול להבין. המנוע צריך להתנהג לפי הסטנדרטים של ecma.

Web server - מחשב שמחובר לאינטרנט, מחכה לבקשות ומספק תגובות.

____________________________________________________________


הבעיות שnode פותרת:
-דרך יותר טובה לארגן את הקוד בחלקים שניתנים לשימוש מחדש.
-להתמודד עם קבצים.
-היכולת לתקשר דרך האינטרנט.
-הדרך לקבל בקשות ולשלוח תגובות(בפורמט אחיד).
-דרך להתמודד עם עבודה שלוקחת הרבה זמן(אסכינכורניות).



הפתרונות של node:
___________________________________________________________

דרך יותר טובה לארגן את הקוד בחלקים שניתנים לשימוש מחדש:

Modules- בלוק של קוד הניתן לשימוש חוזר שהקיום שלו איננו פוגע בשאר הקוד.

CommonJS Modules- סטנדרט (מוסכמה) לגבי איך שהמודול צריך להיות בנוי.

first-class-functions-  כל מה שאפשר לעשות עם סוגים שונים(סטרינג, מספרים וכו') אפשר לעשות עם פונקציות.
אפשר להעביר אותם למשתנים, לשים אותם כפרמטר, בתוך מערכים ועוד...


Expression- בלוק של קוד שמסתכם לכדי ערך למשל לשים משתנה ששווה לערך - זהו expretion (ביטוי).

module.exports - אובייקט שמכיל את מה שרוצים לייבא.
ניתן להוסיף לו תכונות או מתודות. (module.exports.greet=function ...)

Mutate- לשנות משהו.
למשל: להוסיף מתודה או תכונה לאובייקט.



עדיף תמיד להשתמש בmodule.exports לעומת exports - גם ככה משתמשים בזה מעט ואין טעם לזכור ששימוש בכתיבה המקוצרת יוצר בעיה בפנייה לאובייקט של exports
exports היא רק כתיבה מקוצרת לmodule.exports שעושה בדיוק אותו דבר אבל מגיע עם עיוות מעצבן, שעדיף להימנע ממנו(אי אפשר לערוך מחדש את האובייקט, חייבים רק להוסיף לו תכונות).



require - מאפשרת לגשת למודולים קאסטום(שלנו) וקור.
לא מומלץ !!! -לקרוא למודולים שלנו באותו השם של הקור מודולים.

מומלץ- תמיד לארגן את הקוד בחתיכות קטנות(מודולים)

___________________________________________________________

Events Emmiter -אירועים ופולט האירועים של node:
אירועים - משהו שקרה באפליקציה שניתן להגיב אליו.

בnode ישנם 2 סוגים של אירועים-
1) system events - ארועי מערכת, אלו מגיעים מהליבה. ( קוד ++c ) מספרייה של node שנקראית libuv.
2) custom events - אירועים שמגיעים מהליבה של הJavaScript. זוהי ספריית ארועים של JS שניתן לבנות באופן עצמאי.



_________________________________________________
-חשוב לזכור -
דרכים לגשת לתכונות של אובייקט:

דוגמא:
var obj = {
'greet: 'Hello
}

הצהרתי על אובייקט עם תכונה של 'greet : 'hello

גישה לערך של greet ב2 דרכים שונות:
- obj.greet
-obj['greet']

-חשוב לזכור - 
אפשר להצהיר על משתנה ולתת לו ערך עם אותו 
השם כמו תוכנה שקיימת באובייקט ולהפעיל אותו כך:

'var property = 'greet
obj[property]

-------------------------------------
-חשוב לזכור-
להכניס מתודות לתוך מערך ולהפעיל את כל ההתודות שבו באמצעות לולאה.
____________________________________________



EVENT LISTENER - הקוד שמגיב לאירוע.
במקרה של JS המאזין יהיה פונקציה.

Magic string - סטרינג שיש לו משמעות בקוד.
לא בהכרח טוב מכיוון שבגלל ששגיאת כתיב עלולה ליצור באג ומקשה על כלים למצוא אותו.

-------------------------------------------------

Object.create(proto_object)- יוצרת אובייקט חדש מאובייקט קיים שהוא האבטיפוס.

var john = Object.create(person);
			|				|
יוצר אובייקט שיורש מפרסון   האובייקט החדש

------------------------------------------------------

util.inherits - מחברת בין אובייקטים על מנת שאחד יוכל לרשת תכונות מהשני.
events.on - דוחפת אירועים מסוגים שונים למערך שנמצא על האובייקט events 
events.emit - מפעילה את האירועים ע"י לולאה.
-------------------------------------------------------------

Template Literal - דרך לשרשר סטרינג בJS(ES6)
קל יותר לעבוד איתו מאשר עם +

-------------------------------------------------------------

STREAMS

stream - זרם של מידע שמשתנה כל הזמן לפרק זמן בלתי מוגבל(ניתן להגביל).
בנוסף, זרמים הם גם סוג של eventEmitter. כלומר, זאת אומרת שבעקבות המידע שמגיע נוצר אירוע כלשהו.
chunck- חתיכה של מידע שנשלחת ע"י הstream

 ____________________________________________
|								    		 |
| להשמש בסטרימס מתי שרק אפשר! נוד בנוייה לזה.|
|____________________________________________|


Buffer - חוצץ זמני שיכול להחזיק כמות מוגבלת של מידע לפרק זמן מוגבל.
הבאפר בד"כ אוסף מידע מ-stream.
האובייקט של הבאפר כ"כ נפוץ( בנוד) שאין צורך לעשות require למודול.


Pipes - דרך לחבר 2 זרמים.
אפשרי רק מ- readble stream לwriteble Stream 
readble.pipe(writeble) 
כותבים לזרם אחד את מה שקוראים מזרם אחר.
כדי ליצור flow בין הזרמים ניתן להמיר את הזרם לכזה שאפשר גם לכתוב וגם לקרוא ממנו
וכך לשרשר לו את המתודה pipe() ובכל שלב לעבד את המידע בצורה הרצויה.


Method chaining - מתודה שמחזירה אובייקט כך שאפשר להשמש בו ולקרוא לעוד מתודות.
לפעמים היא מחזירה את האובייקט ההורה ולפעמים אובייקט אחר, תלוי בשימוש.

highWaterMark- משתמשים באופציה הזו בStream  כדי להגדיר גודל ספיציפי לכל צ'נק(חתיכה של מידע)

-------------------------------------------------------------
FILE SYSTEM

require('fs')

readFileSync- קוראת קובץ בצורה סינכרונית.

readFile - קורא קובץ בצורה אסינכרונית.
כלומר, התוכנה ממשיכה לעבוד בזמן קריאת הקובץ.
עלול לגרום לזליגת זיכרון במידה והרבה משתמשים מבצעים את אותה הפעולה.


Abstract(base)class- סוג של קונסטרקטור שלעולם לא עובדים איתו ישירות, רק יורשים ממנו.
יוצרים אובייקט חדש לפי הצורך שיורש ממחלקה  אבסטרקטית.בסיסית.


----------------------------------------------------------------------------------------------

TCP/IP ופרוטוקולים

פרוטוקול - סט של חוקים ששני צדדים לפחות הסכימו לתקשר על-פיו.

Internet Protocol -IP
רצף מספרים שמזהה את המחשב.

Socket-החיבור שבו המידע זורם.
 הקו שדרכו זורם המידע בין מחשב למחשב.

transmition control protocol- TCP - פרוטוקול שליטה בשידור.
הפרוטוקול שלוקח את המידע שנשלח בסוקט ומחלק אותו לחתיכות(packets) שנשלחות אחת בכל פעם ממחשב למחשב.

packet - כל חתיכה שנשלחת נקראית 'חבילה'.

 
 פרוטוקולים נוספים:
 המידע שזורם דרך הsocket מורכב מפרוטוקול משל עצמו:
 HTTP-לקבצי טקסט ברשת
 FTP- לקבצים
 SMTP- לאמייל
 וכו'
 כולם משתמשים בפרוטוקול לזיהוי.
 
 
PORT -מספר במחשב שכל תוכנה מקבלת.
ברגע שמגיעה 'חבילה'(packet) היא מתקבלת ע"י פורט של התוכנה הספיציפית שאלייה נשלחה.
בד"כ פורטים מוקצים לתוכנות מסויימת באופן דיפולטיבי אך ניתן לשנות זאת.

listening -האזנה לפורט, כשתוכנה על הOS מחכה לקבל פאקט מפורט ספיציפי היא מאזינה לפורט מסויים.
לכן צריך גם את הIP של המחשב אליו נשלח המידע וגם הפורט של התוכנה שאמורה לקבל את אותו המידע.

נוד מאפשרת לבחור לאיזה פורט היא תאזין. 

hyper text transfer protocol-HTTP
סט של חוקים (ופורמט) עבור העברה של מידע ברשת באמצעות TCP\IP.  

צורת שליחת המידע:
HTTP/1.1 200ok - 
סטטוס, האם ההודעה הגיע בסדר, האם הכל עבר חלק.
Content-Length:44}
Content-Type: text/html }-
Header - זוגות של שם וערך שמציג עוד אינפורמציה על המידע שנשלח

<html>  >>>>>>>
<head>		>>>>>>>
...			   >>>>>>>
</head>				>>>>>>>>	
<body>					>>>>>>>> גוף/Body של ההודעה
...					>>>>>>>>
</body>		   >>>>>>>

</html>	 >>>>>>>>

 
 
 MIME Type- סטנדרט שמפרט את סוג המידע שנשלח
 Muiltipurpose Internet Mail Extensons
 לדוגמא: application/json, text/html, image/jpeg  וכו'...
 
 
 הרעיון הוא שכל מחשב מבין את הmime type ויודע לטפל בכל סוג שמגיע.
 אם הדפדפן רואה mime type מסוג תמונה הוא יודע שצריך לטפל בו כתמונה.
 כנ"ל לגבי html וכו'...
 
 
HTTP_PARSER - מעבדת בקשות ותשובות.
לוקחת את המידע (שבסופו של דבר הוא טקסט בפורמט מסויים) ומידע בינארי אחר
ואז מפרקת אותו מסתכלת עליו ויודעת מה לעשות איתו.
 
 --------------------------------------------------------------

API AND ENDPOINTS

API- Application Programming interface - סט של כלים לבנייה של אפליקציה.
זוהי בד"כ תוכנה אחרת שעוזרת לנו לבנות את התוכנה שלנו.
הכלים האלו בד"כ ניתנים לנו ע"י url מסויים שמקבל ושולח מידע דרך http  וTCP/IP.


 ENDPOINT -
url יחיד בweb api.
לפעמים הendpoint עושה הרבה דברים בהתאם לבקשות שנשלחות בhttp. 
 
Serialize - 
לתרגם אובייקט לפורמט שאפשר לאחסן או לשלוח\להעביר
json, CSV, XML וכו'...

desirialize - ההפך, להפוך את הפורמט בחזרה לאובייקט

--------------------------------------------------------
ROUTING 

routing - מיפוי בקשות http לתוכן.
בין אם קבצים שקיימים על השרת או לא.


-------------------------------------------------------
NPM-Node package manager

package - אסופה של קוד שעובד היטב(מודולים בנויים מראש) וניתן להשתמש בו בקוד שלנו.
מנהלים את החבילה באמצעות מנהל החבילות.

package managment system- תוכנה שמתקינה ומעדכנת אוטומטית חבילות.
מנהלת את התלות בין הקבצים(גרסאות שונות)

Dependency - קוד שקטע קוד אחר תלו בו על מנת לתפקד.
אם משתמשים בקוד מסויים באפליקציה, הוא נחשב לדיפנדנסי(תלות) משום שהאפליקציה תלוייה בו.




Versioning - פירוט מהי הגירסא לסט של הקוד הנ"ל.
כדי שאפשר יהיה לעקוב אחריו במידה וגרסא חדשה של הקוד יצאה.
זה מאפשר לעקוב אחר פיצ'רים חדשים או שינויים משמעותיים בקוד שצריך להתאים את האפליקציה שלנו אליהם.
  
  
Semantic versioning(semver) -
סמנטי משמעו שלדבר ישנה משמעות כלשהי.
כלומר, למספור של הגירסא ישנה משמעות.

דוגמא לגרסא סימנטית:

MAJOR.MINOR.PATCH
1.7.2

הסיפרה הימנית -PATCH- תיקון באגים. תעלה בדרגה כאשר כמה באגים תוקנו והקוד שלנו יעבוד כרגיל בלי צורך לשנות שום דבר.
הסיפרה האמצעית -MINOR- פיצ'רים חדשים. תעלה בדרגה כאשר הוספו פיצ'רים חדשים שאפשר להשתמש בהם ושאר הקוד שלנו יעבוד כרגיל בלי צורך לשנות שום דבר.
הסיפרה השמאלית- MAJOR - שינויים גדולים. משמע שהקוד שלנו עלול להישבר. 


	----------------חשוב!!!!-----------
		npm init - מתחיל יצירה  של אפליקציה חדשה. יוצר קובץ package.json  שמתאר את האפליקציה.

שליטה בעדכון התלותויות-
2.10.6^ - carot  -  הסימן הזה מאפשר לנוד לעדכן את התלות בצורה אוטומטית. מופיע לפני הגירסא.
2.10.6~ -tilde - הסימן הזה מאפשר לנוד לעדכן את התלות כל פעם שהpatch  עולה דרגה.

הסימנים האלו מאפשר לשלוט בגרסא של התלות ומתי נאפשר (אם בכלל) לnpm לעדכן אותן.

npm install-  הפקודה הזו מסתכלת על הקובץ package.json ומורידה את כל מה שנחוץ לנו על-פיו.

אין צורך להעלות את האפליקצייה שלנו עם התקייה של הnode_modules מספיק הpackage.json, שם מתוארות כל התלתויות וnpm init יוריד אותם אוטומטית.


moment - ספרייה פופולארית בג'אווה סקריפט שמאפשרת לפרמט תארכים.

development dependencies - תלותיות רק לפיתוח, כלומר, האפליקציה תעבוד בלעדיהן אחרי שאסיים להשתמש בהן לפיתוח.

דוגמא ל development dependency:
jasmine-node - כלי שמאפשר לבנות מבחנים אוטומטיים. לבחון את התכנה שלי אוטומטית תוך כדי שאני בונה אותה.

התקנת כלים לפיתוח:
npm install jasmine-node --save-dev

npm install -g  - התקנה גלובלית, כלומר npm תוכל לגשת אלייה מכל מקום במחשב, כל אפליקצייה.

npm update - מעדכן את כל התלתויות. במידה ויש להן גירסא חדשה npm תוריד אותה ותערוך את package.json בהתאם.
	
	-----------------חשוב!!------------------
	nodemon - עוקבת אחר שינויים בקוד ומעדכנת אותו בזמן ריצה(אחרי שמירה). במקום להפסיק את השרת ולהתחיל אותו.

-------------------------------------------------------------------------------------------------------------------------
EXPRESS -ספריית JS שעוזרת ליצור בקלות web server.

Invierment variables - משתנים גלובלים ספיציפים לסביבה(בד"כ השרת) שהקוד שלנו נמצא בה.
לשרתים שונים יכולים להיות הגדרות משתנים שונות ולערכים שלהם ניתן לגשת באמצעות הקוד.

	--------------------חשוב!!!-------------------------------------
	HTTP METHOD - מפרט את סוג הפעולה שהבקשה (ה- request) רוצה ליצור.
	GET , POST ,DELETE וכו'...
	פעולות אלו נקראות גם verbs/פעלים.

	
	
Static Files & Middleware

Middleware - קוד שיושב בין 2 שכבות של תוכנה.
	במקרה של אקספרס, הקוד יושב בין הבקשה לתגובה.
	
	
Static : not dynamic - לא משתנה
קבצים שאינם מעובדים ע"י קוד בשום צורה. למשל: html, css , image files . אלו הם קבצים סטטים שלא משתנים(בד"כ)	

קבצים סטטים בד"כ ישבו בתקייה בשם public.


Template engine - כלי שלוקח טקסט ומתרגם אותו לhtml שישלח בhttp response.

Effective JavaScript templating- EJS
שפת לייצירה פשוטה של טמפלטים בhtml  באמצעות JS.


Querystring and post parameters


