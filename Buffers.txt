buffers in node
אובייקט הbuffer נוצר בצד הc++ ואז נהפך לזמין לJS.
- הbuffer מאחסן מידע בינארי.
- מכיל מתודות לדברים שניתן לעשות בשביל להתמודד עם מידע בינארי.
למשל:
ניתן להמיר בין buffers לStrings כך שניתן לאחסן string כמידע בינארי בbuffer עם encoding מסוים, כמו הutf 8.
אפשר גם לאחסן strings עם base 64 למטרות אבטחה.
אך בסופו של דבר הבאפשר מכיל מידע בינארי נקי אותו הוא מאפשר לנו להמיר חזרה לstring, בהנחה שאנחנו מאחסין מידע שצריך להיות מומר לstring.


בגלל שהbuffer כ"כ חשוב, אין צורך לrequire מכייון שהbuffer שהוא גלובלי.        

-חייבים לתת לbuffer מידע.
-כך שאפשר uffer ולהגביל אותו בגודל או פשוט לתת לו ערך של string.
 הutf-8 הוא לא חובה. במידה ולא נציין את סוג הencoding,  זה יהיה הדיפולטיבי.


דוגמא:

var buf = new Buffer('hello', 'utf-8')
Buffer 48 65 6c 6c 6f //console.log(buf)


זו בעצם תהיה ההצפנה של המידע שביקשנו מהbuffer לאחסן.

כעת נוכל להמיר חזרה את הstring למילה המקורית מכיוון שnode יודעת מה ההצפנה ואיך לפרש אותה.

כך:
hello//console.log(buf.toString)

אפשר אפילו להפוך את המידע לJSON:

console.log(buf.toJSON())

output:
{type:'Buffer', data:[72,101,108,108,111]}

נוצר אובייקט מסוג buffer והמידע עצמו הוא מערך של 5 מספרים. אלו הם הunicode charactor set

את המידע שעל המערך הזה נוכל לערוך כרצוננו.

נוכל לשלוף מהbuffer מידע למשל כמו ממערך:

console.log(buf[2]);
output:
108

אפשר גם לכתוב ל buffer

buf.write('wf')
console.log(buf.toString())

output:
wollo.

זכרו, אתחלנו את הbuffer עם המילה hellow. 
לכן לא נוכל להכניס לתוכו יותר ממספר התווים ההתחלתי.
הbuffer נועד להיות מאחסן זמני בלבד ולכן הhello נדרס והתווספו במקומו 2 תווים חדשים.
